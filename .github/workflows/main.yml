
name: FULL STACK CI/CD

permissions:
  contents: write

on:
  push:
    branches: [main, dev]
    paths:
      - 'frontend/**'
      - 'backend1/**'
      - 'backend2/**'
      - 'db/**'
      - '.github/workflows/**'
  pull_request:
    branches: [dev]
    paths:
      - 'frontend/**'
      - 'backend1/**'
      - 'backend2/**'
      - 'db/**'
      - '.github/workflows/**'
  workflow_dispatch:

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      frontend: ${{ steps.filter.outputs.frontend }}
      backend1: ${{ steps.filter.outputs.backend1 }}
      backend2: ${{ steps.filter.outputs.backend2 }}
      db: ${{ steps.filter.outputs.db }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Path changes filter
        uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            frontend:
              - 'frontend/**'
            backend1:
              - 'backend1/**'
            backend2:
              - 'backend2/**'
            db:
              - 'db/**'

  set-vars:
    runs-on: ubuntu-latest
    outputs:
      short_sha: ${{ steps.setvars.outputs.short_sha }}
    steps:
      - name: Set short SHA
        id: setvars
        run: echo "short_sha=$(echo $GITHUB_SHA | cut -c1-7)" >> $GITHUB_OUTPUT

  testing:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Run React tests
        run: echo "test pass for now .... "

      - name: Conventional Commit checks
        uses: webiny/action-conventional-commits@v1.3.0
        with:
          allowed-commit-types: "feat,fix,docs,style,refactor,test,chore,ci,perf,revert"

  frontend:
    needs: [changes, testing, set-vars]
    if: needs.changes.outputs.frontend == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build frontend
        env:
          VITE_BASE_PATH: /cicd/      # ------------------------# ------------------------# ------------------------
        run: |
          cd frontend
          yarn install
          yarn build

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }} # ------------------------# ------------------------# ------------------------
          password: ${{ secrets.DOCKER_HUB_TOKEN }} # ------------------------# ------------------------# ------------------------

      - name: Setup docker buildx
        uses: docker/setup-buildx-action@v3 

      - name: Set frontend image tag
        run: |
          if [[ "${{ github.ref_name }}" == "main" ]]; then
            echo "IMAGE_TAG=${{ secrets.DOCKER_HUB_USERNAME }}/blogapp-frontend:prod-${{ needs.set-vars.outputs.short_sha }}" >> $GITHUB_ENV
          else
            echo "IMAGE_TAG=${{ secrets.DOCKER_HUB_USERNAME }}/blogapp-frontend:dev-${{ needs.set-vars.outputs.short_sha }}" >> $GITHUB_ENV
          fi

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend/
          file: ./frontend/Dockerfile
          push: true
          tags: ${{ env.IMAGE_TAG }} 
          platforms: linux/amd64,linux/arm64 # for multi-arch support
          cache-from: type=local,src=/tmp/.cachebuild # ------------------------  # ------------------------# ------------------------
          cache-to: type=local,dest=/tmp/.cachebuild-new  # ------------------------  # ------------------------# ------------------------

      - name: Upload frontend artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build-${{ github.ref_name }}-${{ needs.set-vars.outputs.short_sha }}
          path: frontend/dist/

      - name: Move updated docker cache
        run: |
          rm -rf /tmp/.cachebuild
          mv /tmp/.cachebuild-new /tmp/.cachebuild
          
      - name: Get Semantic Version
        id: semver_frontend
        uses: mathieudutour/github-tag-action@v6.0
        with:
          github_token: '${{ secrets.GITHUB_TOKEN }}'
          release_branches: main
          tag_prefix: frontend-v
          create_annotated_tag: true
          dry_run: false
          default_bump: patch

  deploy-frontend-pages:
    if: github.ref_name == 'main'
    needs: [frontend, set-vars]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download frontend artifact
        uses: actions/download-artifact@v4
        with:
          name: frontend-build-${{ github.ref_name }}-${{ needs.set-vars.outputs.short_sha }}
          path: dist

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: dist

  trivy-scan-frontend:
    if: needs.changes.outputs.frontend == 'true'
    needs: [frontend, set-vars]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Trivy
        uses: aquasecurity/setup-trivy@v0.2.0
        with:
          version: v0.64.1

      - name: Download Trivy HTML template
        run: curl -sSL -o html.tpl https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/html.tpl

      - name: Run Trivy HTML Scan
        run: |
          trivy image --format template --template @html.tpl \
            -o frontend-trivy-report.html \
            docker.io/${{ secrets.DOCKER_HUB_USERNAME }}/blogapp-frontend:prod-${{ needs.set-vars.outputs.short_sha }}

      - name: Upload Trivy HTML report
        uses: actions/upload-artifact@v4
        with:
          name: trivy-report-frontend
          path: frontend-trivy-report.html

  trivy-scan-backend1:
    if: needs.changes.outputs.backend1 == 'true'
    needs: [frontend, set-vars]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Trivy
        uses: aquasecurity/setup-trivy@v0.2.0
        with:
          version: v0.64.1

      - name: Download Trivy HTML template
        run: curl -sSL -o html.tpl https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/html.tpl

      - name: Run Trivy HTML Scan
        run: |
          trivy image --format template --template @html.tpl \
            -o backend1-trivy-report.html \
            docker.io/${{ secrets.DOCKER_HUB_USERNAME }}/blogapp-frontend:prod-${{ needs.set-vars.outputs.short_sha }}

      - name: Upload Trivy HTML report
        uses: actions/upload-artifact@v4
        with:
          name: trivy-report-backend1
          path: backend1-trivy-report.html

  trivy-scan-backend2:
    if: needs.changes.outputs.backend2 == 'true'
    needs: [frontend, set-vars]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Trivy
        uses: aquasecurity/setup-trivy@v0.2.0
        with:
          version: v0.64.1

      - name: Download Trivy HTML template
        run: curl -sSL -o html.tpl https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/html.tpl

      - name: Run Trivy HTML Scan
        run: |
          trivy image --format template --template @html.tpl \
            -o backend2-trivy-report.html \
            docker.io/${{ secrets.DOCKER_HUB_USERNAME }}/blogapp-frontend:prod-${{ needs.set-vars.outputs.short_sha }}

      - name: Upload Trivy HTML report
        uses: actions/upload-artifact@v4
        with:
          name: trivy-report-backend2
          path: backend2-trivy-report.html

  upload-trivy-reports:
    needs:
      - trivy-scan-backend1
      - trivy-scan-backend2
      - trivy-scan-frontend
      - changes
    if: always()
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: prepare report directory
        run: mkdir -p gh-pages/trivy-report

      - name: copy backend1 report  
        if: needs.changes.outputs.backend1 == 'true'
        run: |
          mkdir -p gh-pages/trivy-report/backend1
          cp artifacts/trivy-report-backend1/backend1-trivy-report.html gh-pages/trivy-report/backend1/index.html

      - name: copy backend2 report    
        if: needs.changes.outputs.backend2 == 'true'
        run: |
          mkdir -p gh-pages/trivy-report/backend2
          cp artifacts/trivy-report-backend2/backend2-trivy-report.html gh-pages/trivy-report/backend2/index.html

      - name: copy frontend report    
        if: needs.changes.outputs.frontend == 'true'
        run: |
          mkdir -p gh-pages/trivy-report/frontend
          cp artifacts/trivy-report-frontend/frontend-trivy-report.html gh-pages/trivy-report/frontend/index.html

      - name: Commit and push Trivy reports
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git fetch origin gh-pages || true
          git switch gh-pages
          cp -r gh-pages/* .
          git add trivy-report
          git commit -m "chore(report): update trivy reports" || echo "No changes"
          git push origin gh-pages

  
  backend1:
    needs: [changes, testing, set-vars]
    if: needs.changes.outputs.backend1 == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Setup docker buildx
        uses: docker/setup-buildx-action@v3

      - name: Set backend1 image tag
        run: |
          if [[ "${{ github.ref_name }}" == "main" ]]; then
            echo "IMAGE_TAG=${{ secrets.DOCKER_HUB_USERNAME }}/blogapp-backend1:prod-${{ needs.set-vars.outputs.short_sha }}" >> $GITHUB_ENV
          else
            echo "IMAGE_TAG=${{ secrets.DOCKER_HUB_USERNAME }}/blogapp-backend1:dev-${{ needs.set-vars.outputs.short_sha }}" >> $GITHUB_ENV
          fi

      - name: Build and push backend1 image
        uses: docker/build-push-action@v5
        with:
          context: ./backend1/
          file: ./backend1/Dockerfile
          push: true
          tags: ${{ env.IMAGE_TAG }}
          platforms: linux/amd64,linux/arm64

          cache-from: type=local,src=/tmp/.cachebuild
          cache-to: type=local,dest=/tmp/.cachebuild-new

      - name: Move updated docker cache
        run: |
          rm -rf /tmp/.cachebuild
          mv /tmp/.cachebuild-new /tmp/.cachebuild

  backend2:
    needs: [changes, testing, set-vars]
    if: needs.changes.outputs.backend2 == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Setup docker buildx
        uses: docker/setup-buildx-action@v3

      - name: Set backend2 image tag
        run: |
          if [[ "${{ github.ref_name }}" == "main" ]]; then
            echo "IMAGE_TAG=${{ secrets.DOCKER_HUB_USERNAME }}/blogapp-backend2:prod-${{ needs.set-vars.outputs.short_sha }}" >> $GITHUB_ENV
          else
            echo "IMAGE_TAG=${{ secrets.DOCKER_HUB_USERNAME }}/blogapp-backend2:dev-${{ needs.set-vars.outputs.short_sha }}" >> $GITHUB_ENV
          fi

      - name: Build and push backend2 image
        uses: docker/build-push-action@v5
        with:
          context: ./backend2/
          file: ./backend2/Dockerfile
          push: true
          tags: ${{ env.IMAGE_TAG }}
          platforms: linux/amd64,linux/arm64

          cache-from: type=local,src=/tmp/.cachebuild
          cache-to: type=local,dest=/tmp/.cachebuild-new

      - name: Move updated docker cache
        run: |
          rm -rf /tmp/.cachebuild
          mv /tmp/.cachebuild-new /tmp/.cachebuild

  database:
    needs: [changes, testing, set-vars]
    if: needs.changes.outputs.db == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Setup docker buildx
        uses: docker/setup-buildx-action@v3

      - name: Set database image tag
        run: |
          if [[ "${{ github.ref_name }}" == "main" ]]; then
            echo "IMAGE_TAG=${{ secrets.DOCKER_HUB_USERNAME }}/blogapp-database:prod-${{ needs.set-vars.outputs.short_sha }}" >> $GITHUB_ENV
          else
            echo "IMAGE_TAG=${{ secrets.DOCKER_HUB_USERNAME }}/blogapp-database:dev-${{ needs.set-vars.outputs.short_sha }}" >> $GITHUB_ENV
          fi

      - name: Build and push database image
        uses: docker/build-push-action@v5
        with:
          context: ./db/
          file: ./db/Dockerfile
          push: true
          tags: ${{ env.IMAGE_TAG }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=local,src=/tmp/.cachebuild
          cache-to: type=local,dest=/tmp/.cachebuild-new

      - name: Move updated docker cache
        run: |
          rm -rf /tmp/.cachebuild
          mv /tmp/.cachebuild-new /tmp/.cachebuild

  # deployment:
  #   needs:
  #     - set-vars
  #     - frontend
  #     - backend1
  #     - backend2
  #     - changes
  #     - trivy-scan-frontend
  #   runs-on: [label1] 
  #   if: needs.changes.outputs.frontend == 'true'

  #   steps:
  #     - name: ssh and deploy
  #       run: |
  #         echo "${{ secrets.SSH_KEY }}" > 1sshkey
  #         chmod 600 1sshkey
  #         ssh -i './1sshkey' ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
  #         echo "hello world" >> hello.txt
  #         export TAG=${{ needs.set-vars.outputs.short_sha }}
  #         docker pull sujan0923/blogapp-backend2:prod-$TAG
  #         docker pull sujan0923/blogapp-backend1:prod-$TAG
  #         docker pull sujan0923/blogapp-frontend:prod-$TAG
          
  #         docker rm -f backend1 backend2 frontend || true
          
  #         docker network create backend-network || true
          
  #         docker run -d --name backend1 \
  #         --network backend-network \
  #         -p 3000:3000 \
  #         sujan0923/blogapp-backend1:prod-$TAG

  #         docker run -d --name backend2 \
  #         --network backend-network \
  #         -p 3001:3001 \
  #         sujan0923/blogapp-backend2:prod-$TAG

  #         docker run -d --name frontend \
  #         --network backend-network \
  #         -p 5173:5173 \
  #         sujan0923/blogapp-frontend:prod-$TAG
  #         EOF
  
  scan-and-publish-semgrep-report:
    name: Scan and Publish Semgrep Report
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install Semgrep and json2html
        run: |
          pip install semgrep json2html
        shell: bash

      - name: Run Semgrep scan
        run: |
          semgrep --json  --config semgrep.yaml . >> semgrep-results.json || true
        shell: bash

      - name: Convert JSON to HTML
        run: |
          python3 -c "import json; from json2html import json2html; print(json2html.convert(json=json.load(open('semgrep-results.json'))))" > semgrep-report.html
        shell: bash


      - name: Checkout GitHub Pages repo
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }}
          token: ${{ secrets.GITHUB_TOKEN }}
          path: pages-repo

      - name: Copy Semgrep HTML report to GitHub Pages repo
        run: |
          mkdir -p pages-repo/scan/semgrep
          cp semgrep-report.html pages-repo/scan/semgrep/index.html
        shell: bash

      - name: Commit and push to GitHub Pages
        run: |
          cd pages-repo
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"

          # Check if there are changes to commit
          if git diff --quiet && git diff --staged --quiet; then
            echo "No changes to commit."
            exit 0
          fi

          git add scan/semgrep/index.html

          git commit -m "Update Semgrep scan report" || { echo "Nothing to commit"; exit 0; }

          # Check current branch
          BRANCH=$(git rev-parse --abbrev-ref HEAD)
          echo "Current branch is $BRANCH"

          if [ "$BRANCH" != "gh-pages" ] && [ "$BRANCH" != "main" ]; then
            echo "Error: pushing to unexpected branch: $BRANCH"
            exit 1
          fi

          git push origin $BRANCH || { echo "Failed to push to origin $BRANCH"; exit 1; }
        shell: bash

        